name: Stage

on:
  push:
    branches:
      - main
    # paths:
    #   - "userservice/**"
    #   - "projectservice/**"

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   env:
  #     GITHUB_USERNAME: ${{ secrets.USERNAME_GITHUB }}
  #     GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Set up .NET SDK
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: 6.0.x

  #     - name: Build UserService
  #       run: |
  #         cd ./userservice
  #         dotnet add package LabelGenius.Authentication --version 0.0.1
  #         dotnet restore
  #         dotnet build

  #     - name: Build ProjectService
  #       run: |
  #         cd ./projectservice
  #         dotnet add package LabelGenius.Authentication --version 0.0.1
  #         dotnet restore
  #         dotnet build

  unit-test:
    # needs: [build]
    runs-on: ubuntu-latest
    env:
      GITHUB_USERNAME: ${{ secrets.USERNAME_GITHUB }}
      GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Run project unit tests
        run: |
          cd ./projectservice
          dotnet add package LabelGenius.Authentication --version 0.0.1
          cd ../projectservice.unittests
          dotnet restore
          dotnet test --filter FullyQualifiedName~UnitTestProject

  build-image:
    runs-on: ubuntu-latest
    needs: [unit-test]
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      GITHUB_USERNAME: ${{ secrets.USERNAME_GITHUB }}
      GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Filter Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            userservice:
              - 'userservice/**'
            projectservice:
              - 'projectservice/**'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Deploy UserService to DockerHub
        if: steps.changes.outputs.userservice == 'true'
        run: |
          cd ./userservice
          docker build -t $DOCKER_USERNAME/userservice:latest --build-arg GITHUB_USERNAME=$GITHUB_USERNAME --build-arg GITHUB_TOKEN=$GITHUB_TOKEN .
          docker push $DOCKER_USERNAME/userservice:latest

      - name: Deploy ProjectService to DockerHub
        if: steps.changes.outputs.projectservice == 'true'
        run: |
          cd ./projectservice
          docker build -t $DOCKER_USERNAME/projectservice:latest --build-arg GITHUB_USERNAME=$GITHUB_USERNAME --build-arg GITHUB_TOKEN=$GITHUB_TOKEN .
          docker push $DOCKER_USERNAME/projectservice:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build-image]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Filter Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            userservice:
              - 'userservice/**'
            projectservice:
              - 'projectservice/**'

      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: "v0.0.25"

      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: labelgenius
          cluster-name: labelgenius-cluster
          admin: "false"
          use-kubelogin: "true"

      - name: Deploy UserService to AKS
        if: steps.changes.outputs.userservice == 'true'
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ./userservice/k8s-manifest/deployment.yml
          namespace: ingress-basic
          images: |
            $DOCKER_USERNAME/userservice:latest

      - name: Deploy ProjectService to AKS
        if: steps.changes.outputs.projectservice == 'true'
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ./projectservice/k8s-manifest/deployment.yml
          namespace: ingress-basic
          images: |
            $DOCKER_USERNAME/projectservice:latest
