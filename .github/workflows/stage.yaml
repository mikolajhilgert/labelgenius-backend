name: Stage

on:
  push:
    branches:
      - main
    paths:
      - "userservice/**"
      - "projectservice/**"
      - "communicationservice/**"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_USERNAME: ${{ secrets.USERNAME_GITHUB }}
      GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Build UserService
        run: |
          cd ./userservice
          dotnet add package LabelGenius.Authentication --version 0.0.1
          dotnet restore
          dotnet build

      - name: Build ProjectService
        run: |
          cd ./projectservice
          dotnet add package LabelGenius.Authentication --version 0.0.1
          dotnet restore
          dotnet build

      - name: Build CommunicationService
        run: |
          cd ./communicationservice
          dotnet restore
          dotnet build

  unit-test:
    needs: [build]
    runs-on: ubuntu-latest
    env:
      GITHUB_USERNAME: ${{ secrets.USERNAME_GITHUB }}
      GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Run unit tests
        run: |
          cd ./projectservice
          dotnet add package LabelGenius.Authentication --version 0.0.1
          cd ../projectservice.unittests
          dotnet restore
          dotnet test --filter FullyQualifiedName~projectservice.unittests.UnitTests

  sonarcloud:
    needs: [build]
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: "zulu" # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd ./userservice
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_USERNAME: ${{ secrets.USERNAME_GITHUB }}
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          cd ./userservice
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"mikolajhilgert_labelgenius-backend" /o:"mikolajhilgert" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet add package LabelGenius.Authentication --version 0.0.1
          dotnet build --no-incremental
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  build-image:
    runs-on: ubuntu-latest
    needs: [unit-test]
    # needs: [unit-test, sonarcloud]
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      GITHUB_USERNAME: ${{ secrets.USERNAME_GITHUB }}
      GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Filter Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            userservice:
              - 'userservice/**'
            projectservice:
              - 'projectservice/**'
            communicationservice:
              - 'communicationservice/**'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Deploy UserService to DockerHub
        if: steps.changes.outputs.userservice == 'true'
        run: |
          cd ./userservice
          docker build -t $DOCKER_USERNAME/userservice:latest --build-arg GITHUB_USERNAME=$GITHUB_USERNAME --build-arg GITHUB_TOKEN=$GITHUB_TOKEN .
          docker push $DOCKER_USERNAME/userservice:latest

      - name: Deploy ProjectService to DockerHub
        if: steps.changes.outputs.projectservice == 'true'
        run: |
          cd ./projectservice
          docker build -t $DOCKER_USERNAME/projectservice:latest --build-arg GITHUB_USERNAME=$GITHUB_USERNAME --build-arg GITHUB_TOKEN=$GITHUB_TOKEN .
          docker push $DOCKER_USERNAME/projectservice:latest

      - name: Deploy CommunicationService to DockerHub
        if: steps.changes.outputs.communicationservice == 'true'
        run: |
          cd ./communicationservice
          docker build -t $DOCKER_USERNAME/communicationservice:latest --build-arg GITHUB_USERNAME=$GITHUB_USERNAME --build-arg GITHUB_TOKEN=$GITHUB_TOKEN .
          docker push $DOCKER_USERNAME/communicationservice:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build-image]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Filter Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            userservice:
              - 'userservice/**'
            projectservice:
              - 'projectservice/**'
            communicationservice:
              - 'communicationservice/**'

      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: "v0.0.25"

      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: labelgenius
          cluster-name: labelgenius-cluster
          admin: "false"
          use-kubelogin: "true"

      - name: Deploy UserService to AKS
        if: steps.changes.outputs.userservice == 'true'
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ./userservice/k8s-manifest/deployment-stage.yml
          namespace: stage
          images: |
            $DOCKER_USERNAME/userservice:latest

      - name: Deploy ProjectService to AKS
        if: steps.changes.outputs.projectservice == 'true'
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ./projectservice/k8s-manifest/deployment-stage.yml
          namespace: stage
          images: |
            $DOCKER_USERNAME/projectservice:latest

      - name: Deploy CommunicationService to AKS
        if: steps.changes.outputs.communicationservice == 'true'
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ./communicationservice/k8s-manifest/deployment-stage.yml
          namespace: stage
          images: |
            $DOCKER_USERNAME/communicationservice:latest
